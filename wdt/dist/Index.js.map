{"version":3,"file":"Index.js","sourceRoot":"","sources":["../src/Index.tsx"],"names":[],"mappings":"AAQA,OAAO,EAAE,cAAc,EAAE,MAAM,gCAAgC,CAAC;AAEhE,MAAM,CAAC,OAAO,OAAO,aAAa;IAAlC;QACe,SAAI,GAAG,KAAK,CAAC;QACpB,eAAU,GAAG,MAAM,CAAC;IA8D5B,CAAC;IA5DO,uBAAuB,CAAC,KAAY,EAAE,IAAY,EAAE,OAAe;QACnE,MAAM,SAAS,GAAG,IAAI,cAAc,CAAC,KAAK,CAAC,CAAC;QAE5C,OAAO,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,OAAO,CAAC;aAClD,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE;YACb,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YAC7D,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;gBAC3B,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;gBAC/B,IAAI,QAAQ,EAAE,CAAC;oBACX,YAAY;oBACZ,IAAI,SAAS,CAAC,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC;wBAC9C,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;wBAEnC,WAAW;wBACX,MAAM,QAAQ,GAAG,QAAQ,CAAC,iBAAiB,EAAE,CAAC;wBAC9C,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE;4BACnB,IAAI,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC;gCACtC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;4BAC/B,CAAC;wBACL,CAAC,CAAC,CAAC;oBACP,CAAC;gBACL,CAAC;YACL,CAAC,CAAC,CAAC;YACH,OAAO,SAAS,CAAC;QACrB,CAAC,CAAC;aACD,KAAK,CAAC,CAAC,EAAE,EAAE,EAAE;YACV,MAAM,EAAE,CAAC;QACb,CAAC,CAAC,CAAC;IACP,CAAC;IAED,eAAe,CACb,WAAgB,EAChB,KAAY,EACZ,IAAS,EACT,OAAe,EACf,UAAuD,EACvD,QAAiB;QAExB,MAAM,KAAK,GAAyB,EAAE,CAAC;QACvC,OAAO,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE;YAClC,OAAO;gBACV,MAAM,EAAE,IAAI;gBACZ,eAAe,EAAE,EAAE;gBACnB,SAAS,EAAE,EAAE;gBACb,eAAe,EAAE,EAAE;gBACnB,cAAc,EAAE,EAAE;gBAClB,UAAU,EAAE,EAAE;gBACd,MAAM,EAAE,EAAE;aACN,CAAC;QACJ,CAAC,CAAC,CAAC;IACE,CAAC;IAED,SAAS,CAAC,KAAY,EAAE,IAAY,EAAE,OAAe;QACrD,kBAAkB;QAChB,OAAO,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE;QAClE,CAAC,CAAC,CAAC;IACZ,CAAC;IACM,YAAY;QAClB,OAAO,IAAI,aAAa,EAAE,CAAC;IAC5B,CAAC;CACD","sourcesContent":["import type { \n\tISceneLoaderPluginAsync, \n\tISceneLoaderPluginFactory,\n\tISceneLoaderAsyncResult,\n\tISceneLoaderPlugin,\n\tISceneLoaderProgressEvent,\n} from \"@babylonjs/core/Loading/sceneLoader\";\nimport type { Scene } from \"@babylonjs/core/scene\";\nimport { AssetContainer } from \"@babylonjs/core/assetContainer\";\n\nexport default class WDTFileLoader implements ISceneLoaderPluginAsync, ISceneLoaderPluginFactory {\n        public name = \"wdt\";\n\tpublic extensions = \".wdt\";\n\n\tpublic loadAssetContainerAsync(scene: Scene, data: string, rootUrl: string): Promise<AssetContainer> {\n        const container = new AssetContainer(scene);\n\n        return this.importMeshAsync(null, scene, data, rootUrl)\n            .then((result) => {\n                result.meshes.forEach((mesh) => container.meshes.push(mesh));\n                result.meshes.forEach((mesh) => {\n                    const material = mesh.material;\n                    if (material) {\n                        // Materials\n                        if (container.materials.indexOf(material) == -1) {\n                            container.materials.push(material);\n\n                            // Textures\n                            const textures = material.getActiveTextures();\n                            textures.forEach((t) => {\n                                if (container.textures.indexOf(t) == -1) {\n                                    container.textures.push(t);\n                                }\n                            });\n                        }\n                    }\n                });\n                return container;\n            })\n            .catch((ex) => {\n                throw ex;\n            });\n        }\n\n\tpublic importMeshAsync(\n          meshesNames: any,\n          scene: Scene,\n          data: any,\n          rootUrl: string,\n          onProgress?: (event: ISceneLoaderProgressEvent) => void,\n          fileName?: string\n        ): Promise<ISceneLoaderAsyncResult> {\n\t  const array: Array<Promise<void>> = [];\n\t  return Promise.all(array).then(() => {\n\t    return {\n\t\tmeshes: data,\n\t\tparticleSystems: [],\n\t\tskeletons: [],\n\t\tanimationGroups: [],\n\t\ttransformNodes: [],\n\t\tgeometries: [],\n\t\tlights: [],\n\t    };\n\t  });\n        }\n\t\n\tpublic loadAsync(scene: Scene, data: string, rootUrl: string): Promise<void> {\n        //Get the 3D model\n          return this.importMeshAsync(null, scene, data, rootUrl).then(() => {\n          });\n\t}\n\tpublic createPlugin(): ISceneLoaderPluginAsync | ISceneLoaderPlugin {\n\t\treturn new WDTFileLoader();\n\t}\n}\n"]}