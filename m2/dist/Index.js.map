{"version":3,"file":"Index.js","sourceRoot":"","sources":["../src/Index.ts"],"names":[],"mappings":"AASA,OAAO,EAAE,cAAc,EAAE,MAAM,gCAAgC,CAAC;AAGhE,OAAO,EAAW,OAAO,EAAE,aAAa,EAAE,MAAM,kBAAkB,CAAC;AAEnE,OAAO,EAAE,YAAY,EAAE,eAAe,EAAE,eAAe,EAAE,MAAM,WAAW,CAAC;AAG3E,MAAM,CAAC,OAAO,OAAO,YAAY;IAAjC;QAGS,SAAI,GAAG,IAAI,CAAC;QACZ,eAAU,GAAiC;YAChD,KAAK,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE;SAC1B,CAAC;IAuEJ,CAAC;IAtEC,gBAAgB;IAET,uBAAuB,CAC5B,KAAY,EACZ,IAAY,EACZ,OAAe;QAEf,MAAM,SAAS,GAAG,IAAI,cAAc,CAAC,KAAK,CAAC,CAAC;QAE5C,OAAO,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,OAAO,CAAC;aACpD,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE;YACf,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YAC7D,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;gBAC7B,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;gBAC/B,IAAI,QAAQ,EAAE,CAAC;oBACb,YAAY;oBACZ,IAAI,SAAS,CAAC,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC;wBAChD,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;wBAEnC,WAAW;wBACX,MAAM,QAAQ,GAAG,QAAQ,CAAC,iBAAiB,EAAE,CAAC;wBAC9C,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE;4BACrB,IAAI,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC;gCACxC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;4BAC7B,CAAC;wBACH,CAAC,CAAC,CAAC;oBACL,CAAC;gBACH,CAAC;YACH,CAAC,CAAC,CAAC;YACH,OAAO,SAAS,CAAC;QACnB,CAAC,CAAC;aACD,KAAK,CAAC,CAAC,EAAE,EAAE,EAAE;YACZ,MAAM,EAAE,CAAC;QACX,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,eAAe,CACpB,WAAgB,EAChB,KAAY,EACZ,IAAS,EACT,OAAe,EACf,UAAuD,EACvD,QAAiB;QAEjB,QAAQ,CAAC,IAAI,CAAC,CAAC;QAEf,MAAM,KAAK,GAAyB,EAAE,CAAC;QACvC,MAAM,MAAM,GAAgB,EAAE,CAAC;QAC/B,OAAO,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE;YAClC,OAAO;gBACL,MAAM,EAAE,MAAM;gBACd,eAAe,EAAE,EAAE;gBACnB,SAAS,EAAE,EAAE;gBACb,eAAe,EAAE,EAAE;gBACnB,cAAc,EAAE,EAAE;gBAClB,UAAU,EAAE,EAAE;gBACd,MAAM,EAAE,EAAE;gBACV,cAAc,EAAE,EAAE;aACnB,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,SAAS,CAAC,KAAY,EAAE,IAAY,EAAE,OAAe;QAC1D,kBAAkB;QAClB,OAAO,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,GAAE,CAAC,CAAC,CAAC;IACzE,CAAC;IAEM,YAAY;QACjB,OAAO,IAAI,YAAY,EAAE,CAAC;IAC5B,CAAC;CACF;AAED,MAAM,QAAQ,GAAG,CAAC,SAAc,EAAE,EAAE;IAChC,MAAM,KAAK,GAAG,IAAI,OAAO,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAE5C,MAAM,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAC5C,MAAM,gBAAgB,GAAG,KAAK,CAAC,gBAAgB,GAAG,CAAC,CAAC;IACpD,MAAM,iBAAiB,GAAG,gBAAgB,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;IACvE,MAAM,eAAe,GAAG,GAAG,aAAa,GAAG,iBAAiB,OAAO,CAAC;IAEpE,MAAM,eAAe,GAAG,MAAM,SAAS,CAAC,IAAI,CAAM,EAAE,eAAe,CAAC,CAAC;IACrE,MAAM,WAAW,GAAG,IAAI,aAAa,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;IAEnE,MAAM,QAAQ,GAAG,kBAAkB,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC;IACxD,MAAM,SAAS,GAAG,mBAAmB,CAAC,WAAW,CAAC,CAAC;IACnD,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,WAAW,EAAE,GAAG,eAAe,CAAC,KAAK,CAAC,CAAC;IAC/D,MAAM,EAAE,SAAS,EAAE,cAAc,EAAE,GAAG,mBAAmB,CAAC,KAAK,CAAC,CAAC;IACjE,MAAM,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC;IAC1B,MAAM,cAAc,GAAG,KAAK,CAAC,cAAc,CAAC;IAC5C,MAAM,iBAAiB,GAAG,KAAK,CAAC,iBAAiB,CAAC;IAClD,MAAM,cAAc,GAAG,KAAK,CAAC,MAAM,CAAC;IAEpC,oEAAoE;IACpE,MAAM,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAC/C,YAAY,CAAC,MAAM,EAAE,cAAc,CAAC,MAAM,CAAC,CAAC;IAC5C,MAAM,MAAM,GAAgB;QAC1B,MAAM;QACN,MAAM,EAAE,eAAe,CAAC,MAAM,CAAC;QAC/B,MAAM,EAAE,eAAe,CAAC,MAAM,CAAC;KAChC,CAAC;IAEF,MAAM,IAAI,GAAc;QACtB,IAAI,EAAE,KAAK,CAAC,IAAI;QAChB,QAAQ;QACR,SAAS;QACT,KAAK;QACL,OAAO;QACP,KAAK;QACL,SAAS;QACT,MAAM;QACN,cAAc;QACd,iBAAiB;QACjB,cAAc;KACf,CAAC;IAEF,MAAM,QAAQ,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,YAAY,EAAE,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,GAAG,WAAW,CAAC,CAAC;IAEzF,OAAO,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;AAC1B,CAAC,CAAA;AAEH,MAAM,eAAe,GAAG,CAAC,KAAc,EAAE,WAA0B,EAAE,EAAE;IACnE,MAAM,WAAW,GAAG,IAAI,UAAU,CAAC,WAAW,CAAC,QAAQ,CAAC,MAAM,GAAG,EAAE,CAAC,CAAC;IACrE,MAAM,WAAW,GAAG,IAAI,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;IAEnD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC;QACrE,MAAM,WAAW,GAAG,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;QAC5C,MAAM,MAAM,GAAG,WAAW,CAAC,QAAQ,CAAC,WAAW,GAAG,EAAE,EAAE,CAAC,WAAW,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;QAC9E,WAAW,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;IAC7B,CAAC;IAED,OAAO,WAAW,CAAC,MAAM,CAAC;AAC5B,CAAC,CAAA;AACH,MAAM,kBAAkB,GAAG,CAAC,KAAc,EAAE,WAA0B,EAAE,EAAE;IACtE,MAAM,MAAM,GAAG;QACb,MAAM,EAAE,KAAK,CAAC,MAAM,CAAC,MAAM;QAC3B,MAAM,EAAE,eAAe,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC;QAC5C,MAAM,EAAE,KAAK,CAAC,MAAM,CAAC,MAAM;KAC5B,CAAC;IACF,MAAM,YAAY,GAAG,eAAe,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC;IACzD,MAAM,WAAW,GAAG,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC;IAE/C,MAAM,MAAM,GAAG,EAAE,CAAC;IAClB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;QACpD,MAAM,KAAK,GAAG,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACrC,MAAM,CAAC,IAAI,CAAC;YACV,KAAK,EAAE,KAAK,CAAC,WAAW,CAAC,UAAU;YACnC,KAAK,EAAE,KAAK,CAAC,WAAW,CAAC,UAAU;YACnC,aAAa,EAAE,CAAC;SACjB,CAAC,CAAC;IACL,CAAC;IAED,OAAO;QACL,MAAM;QACN,YAAY;QACZ,WAAW;QACX,MAAM;KACP,CAAC;AACJ,CAAC,CAAA;AAEH,MAAM,mBAAmB,GAAG,CAAC,KAAc,EAAE,EAAE;IAC3C,MAAM,MAAM,GAAG,IAAI,YAAY,CAAC,CAAC,CAAC,CAAC;IACnC,MAAM,aAAa,GAAmB,EAAE,CAAC;IAEzC,KAAK,MAAM,QAAQ,IAAI,KAAK,CAAC,SAAS,EAAE,CAAC;QACvC,YAAY,CAAC,MAAM,EAAE,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QAE7C,aAAa,CAAC,IAAI,CAAC;YACjB,EAAE,EAAE,QAAQ,CAAC,EAAE;YACf,cAAc,EAAE,QAAQ,CAAC,cAAc;YACvC,QAAQ,EAAE,QAAQ,CAAC,QAAQ;YAC3B,SAAS,EAAE,QAAQ,CAAC,SAAS;YAC7B,KAAK,EAAE,QAAQ,CAAC,KAAK;YACrB,SAAS,EAAE,QAAQ,CAAC,SAAS;YAC7B,SAAS,EAAE,QAAQ,CAAC,SAAS;YAC7B,aAAa,EAAE,QAAQ,CAAC,aAAa;YACrC,SAAS,EAAE,QAAQ,CAAC,SAAS;SAC9B,CAAC,CAAC;IACL,CAAC;IAED,8CAA8C;IAC9C,MAAM,cAAc,GAAgB;QAClC,MAAM;QACN,MAAM,EAAE,eAAe,CAAC,MAAM,CAAC;QAC/B,MAAM,EAAE,eAAe,CAAC,MAAM,CAAC;KAChC,CAAC;IAEF,OAAO,EAAE,SAAS,EAAE,aAAa,EAAE,cAAc,EAAE,CAAC;AACtD,CAAC,CAAA;AAEH,MAAM,eAAe,GAAG,CAAC,KAAc,EAAE,EAAE;IAC3C,MAAM,SAAS,GAAG,EAAE,CAAC;IACjB,MAAM,WAAW,GAAG,EAAE,CAAC;IACvB,IAAI,OAAO,GAAG,KAAK,CAAC;IAEpB,KAAK,MAAM,IAAI,IAAI,KAAK,CAAC,KAAK,EAAE,CAAC;QAC/B,2DAA2D;QAC3D,MAAM,kBAAkB,GAAG,IAAI,CAAC,gBAAgB,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,CAAC;QAC1E,MAAM,eAAe,GAAG,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,CAAC;QACpE,MAAM,YAAY,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,CAAC;QAC9D,IAAI,kBAAkB,IAAI,eAAe,IAAI,YAAY,EAAE,CAAC;YAC1D,OAAO,GAAG,IAAI,CAAC;QACjB,CAAC;QAED,mDAAmD;QACnD,IAAI,IAAI,CAAC,KAAK,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC;YAC5C,OAAO,GAAG,IAAI,CAAC;QACjB,CAAC;QAED,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,gBAAgB,CAAC,aAAa,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACpE,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;YAChE,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;QACjE,CAAC;QAED,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACjE,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;YAC7D,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;QAC9D,CAAC;QAED,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YAC9D,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;YAC1D,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;QAC3D,CAAC;QAED,SAAS,CAAC,IAAI,CAAC;YACb,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,WAAW,EAAE,IAAI,CAAC,WAAW;YAC7B,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,gBAAgB,EAAE,IAAI,CAAC,gBAAgB;YACvC,aAAa,EAAE,IAAI,CAAC,aAAa;YACjC,UAAU,EAAE,IAAI,CAAC,UAAU;SAC5B,CAAC,CAAC;IACL,CAAC;IAED,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,SAAS,EAAE,WAAW,EAAE,CAAC;AACpD,CAAC,CAAA;AAEH,MAAM,mBAAmB,GAAG,CAAC,KAAc,EAAE,EAAE;IAC3C,MAAM,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;QAChD,KAAK,EAAE,OAAO,CAAC,KAAK;QACpB,SAAS,EAAE,OAAO,CAAC,SAAS;QAC5B,IAAI,EAAE,OAAO,CAAC,QAAQ;KACvB,CAAC,CAAC,CAAC;IAEJ,OAAO;QACL,KAAK,EAAE,KAAK,CAAC,QAAQ,CAAC,KAAK;QAC3B,KAAK,EAAE,KAAK,CAAC,QAAQ,CAAC,KAAK;QAC3B,QAAQ;QACR,kBAAkB,EAAE,KAAK,CAAC,kBAAkB;QAC5C,uBAAuB,EAAE,KAAK,CAAC,uBAAuB;QACtD,kBAAkB,EAAE,KAAK,CAAC,UAAU;QACpC,YAAY,EAAE,KAAK,CAAC,YAAY;QAChC,cAAc,EAAE,KAAK,CAAC,cAAc;QACpC,cAAc,EAAE,KAAK,CAAC,WAAW,CAAC,cAAc;KACjD,CAAC;AACN,CAAC,CAAA","sourcesContent":["import type {\n  ISceneLoaderPluginAsync,\n  ISceneLoaderPluginFactory,\n  ISceneLoaderAsyncResult,\n  ISceneLoaderPlugin,\n  ISceneLoaderPluginExtensions,\n  ISceneLoaderProgressEvent,\n} from \"@babylonjs/core/Loading/sceneLoader\";\nimport type { Scene } from \"@babylonjs/core/scene\";\nimport { AssetContainer } from \"@babylonjs/core/assetContainer\";\nimport { Mesh } from \"@babylonjs/core/Meshes/mesh\";\n\nimport { M2Batch, M2Model, M2SkinProfile } from '@wowserhq/format';\n\nimport { expandExtent, getBoundsCenter, getBoundsRadius } from './util.js';\nimport { ModelBounds, ModelSpec, SequenceSpec } from './types.js';\n\nexport default class M2FileLoader\n  implements ISceneLoaderPluginAsync, ISceneLoaderPluginFactory\n{\n  public name = \"m2\";\n  public extensions: ISceneLoaderPluginExtensions = {\n    \".m2\": { isBinary: true },\n  };\n  /** @internal */\n\n  public loadAssetContainerAsync(\n    scene: Scene,\n    data: string,\n    rootUrl: string,\n  ): Promise<AssetContainer> {\n    const container = new AssetContainer(scene);\n\n    return this.importMeshAsync(null, scene, data, rootUrl)\n      .then((result) => {\n        result.meshes.forEach((mesh) => container.meshes.push(mesh));\n        result.meshes.forEach((mesh) => {\n          const material = mesh.material;\n          if (material) {\n            // Materials\n            if (container.materials.indexOf(material) == -1) {\n              container.materials.push(material);\n\n              // Textures\n              const textures = material.getActiveTextures();\n              textures.forEach((t) => {\n                if (container.textures.indexOf(t) == -1) {\n                  container.textures.push(t);\n                }\n              });\n            }\n          }\n        });\n        return container;\n      })\n      .catch((ex) => {\n        throw ex;\n      });\n  }\n\n  public importMeshAsync(\n    meshesNames: any,\n    scene: Scene,\n    data: any,\n    rootUrl: string,\n    onProgress?: (event: ISceneLoaderProgressEvent) => void,\n    fileName?: string,\n  ): Promise<ISceneLoaderAsyncResult> {\n    loadSpec(data);\n\n    const array: Array<Promise<void>> = [];\n    const meshes: Array<Mesh> = [];\n    return Promise.all(array).then(() => {\n      return {\n        meshes: meshes,\n        particleSystems: [],\n        skeletons: [],\n        animationGroups: [],\n        transformNodes: [],\n        geometries: [],\n        lights: [],\n        spriteManagers: [],\n      };\n    });\n  }\n\n  public loadAsync(scene: Scene, data: string, rootUrl: string): Promise<void> {\n    //Get the 3D model\n    return this.importMeshAsync(null, scene, data, rootUrl).then(() => {});\n  }\n\n  public createPlugin(): ISceneLoaderPluginAsync | ISceneLoaderPlugin {\n    return new M2FileLoader();\n  }\n}\n\nconst loadSpec = (modelData: any) => {\n    const model = new M2Model().load(modelData);\n\n    const modelBasePath = path.split('.').at(0);\n    const skinProfileIndex = model.skinProfileCount - 1;\n    const skinProfileSuffix = skinProfileIndex.toString().padStart(2, '0');\n    const skinProfilePath = `${modelBasePath}${skinProfileSuffix}.skin`;\n\n    const skinProfileData = await loadAsset(this.#host, skinProfilePath);\n    const skinProfile = new M2SkinProfile(model).load(skinProfileData);\n\n    const geometry = createGeometrySpec(model, skinProfile);\n    const materials = createMaterialSpecs(skinProfile);\n    const { bones, skinned, boneBuffers } = createBoneSpecs(model);\n    const { sequences, sequenceBounds } = createSequenceSpecs(model);\n    const loops = model.loops;\n    const textureWeights = model.textureWeights;\n    const textureTransforms = model.textureTransforms;\n    const materialColors = model.colors;\n\n    // Expand geometry bounds by sequence bounds to produce model bounds\n    const extent = geometry.bounds.extent.slice(0);\n    expandExtent(extent, sequenceBounds.extent);\n    const bounds: ModelBounds = {\n      extent,\n      center: getBoundsCenter(extent),\n      radius: getBoundsRadius(extent),\n    };\n\n    const spec: ModelSpec = {\n      name: model.name,\n      geometry,\n      materials,\n      bones,\n      skinned,\n      loops,\n      sequences,\n      bounds,\n      textureWeights,\n      textureTransforms,\n      materialColors,\n    };\n\n    const transfer = [spec.geometry.vertexBuffer, spec.geometry.indexBuffer, ...boneBuffers];\n\n    return [spec, transfer];\n  }\n\nconst extractVertices = (model: M2Model, skinProfile: M2SkinProfile) => {\n    const vertexArray = new Uint8Array(skinProfile.vertices.length * 48);\n    const sourceArray = new Uint8Array(model.vertices);\n\n    for (let i = 0, j = 0; i < skinProfile.vertices.length; i++, j += 48) {\n      const vertexIndex = skinProfile.vertices[i];\n      const vertex = sourceArray.subarray(vertexIndex * 48, (vertexIndex + 1) * 48);\n      vertexArray.set(vertex, j);\n    }\n\n    return vertexArray.buffer;\n  }\nconst createGeometrySpec = (model: M2Model, skinProfile: M2SkinProfile) => {\n    const bounds = {\n      extent: model.bounds.extent,\n      center: getBoundsCenter(model.bounds.extent),\n      radius: model.bounds.radius,\n    };\n    const vertexBuffer = extractVertices(model, skinProfile);\n    const indexBuffer = skinProfile.indices.buffer;\n\n    const groups = [];\n    for (let i = 0; i < skinProfile.batches.length; i++) {\n      const batch = skinProfile.batches[i];\n      groups.push({\n        start: batch.skinSection.indexStart,\n        count: batch.skinSection.indexCount,\n        materialIndex: i,\n      });\n    }\n\n    return {\n      bounds,\n      vertexBuffer,\n      indexBuffer,\n      groups,\n    };\n  }\n\nconst createSequenceSpecs = (model: M2Model) => {\n    const extent = new Float32Array(6);\n    const sequenceSpecs: SequenceSpec[] = [];\n\n    for (const sequence of model.sequences) {\n      expandExtent(extent, sequence.bounds.extent);\n\n      sequenceSpecs.push({\n        id: sequence.id,\n        variationIndex: sequence.variationIndex,\n        duration: sequence.duration,\n        moveSpeed: sequence.moveSpeed,\n        flags: sequence.flags,\n        frequency: sequence.frequency,\n        blendTime: sequence.blendTime,\n        variationNext: sequence.variationNext,\n        aliasNext: sequence.aliasNext,\n      });\n    }\n\n    // Produce bounds that encompass all sequences\n    const sequenceBounds: ModelBounds = {\n      extent,\n      center: getBoundsCenter(extent),\n      radius: getBoundsRadius(extent),\n    };\n\n    return { sequences: sequenceSpecs, sequenceBounds };\n  }\n\nconst createBoneSpecs = (model: M2Model) => {\nconst boneSpecs = [];\n    const boneBuffers = [];\n    let skinned = false;\n\n    for (const bone of model.bones) {\n      // If bone animations are present, the model needs skinning\n      const hasTranslationAnim = bone.translationTrack.sequenceTimes.length > 0;\n      const hasRotationAnim = bone.rotationTrack.sequenceTimes.length > 0;\n      const hasScaleAnim = bone.scaleTrack.sequenceTimes.length > 0;\n      if (hasTranslationAnim || hasRotationAnim || hasScaleAnim) {\n        skinned = true;\n      }\n\n      // If bone is billboarded, the model needs skinning\n      if (bone.flags & (0x8 | 0x10 | 0x20 | 0x40)) {\n        skinned = true;\n      }\n\n      for (let i = 0; i < bone.translationTrack.sequenceTimes.length; i++) {\n        boneBuffers.push(bone.translationTrack.sequenceTimes[i].buffer);\n        boneBuffers.push(bone.translationTrack.sequenceKeys[i].buffer);\n      }\n\n      for (let i = 0; i < bone.rotationTrack.sequenceTimes.length; i++) {\n        boneBuffers.push(bone.rotationTrack.sequenceTimes[i].buffer);\n        boneBuffers.push(bone.rotationTrack.sequenceKeys[i].buffer);\n      }\n\n      for (let i = 0; i < bone.scaleTrack.sequenceTimes.length; i++) {\n        boneBuffers.push(bone.scaleTrack.sequenceTimes[i].buffer);\n        boneBuffers.push(bone.scaleTrack.sequenceKeys[i].buffer);\n      }\n\n      boneSpecs.push({\n        pivot: bone.pivot,\n        parentIndex: bone.parentIndex,\n        flags: bone.flags,\n        translationTrack: bone.translationTrack,\n        rotationTrack: bone.rotationTrack,\n        scaleTrack: bone.scaleTrack,\n      });\n    }\n\n    return { skinned, bones: boneSpecs, boneBuffers };\n  }\n\nconst createMaterialSpecs = (batch: M2Batch) => {\n    const textures = batch.textures.map((texture) => ({\n      flags: texture.flags,\n      component: texture.component,\n      path: texture.filename,\n    }));\n\n    return {\n      flags: batch.material.flags,\n      blend: batch.material.blend,\n      textures,\n      textureWeightIndex: batch.textureWeightIndex,\n      textureTransformIndices: batch.textureTransformIndices,\n      materialColorIndex: batch.colorIndex,\n      vertexShader: batch.vertexShader,\n      fragmentShader: batch.fragmentShader,\n      boneInfluences: batch.skinSection.boneInfluences,\n    };\n}\n"]}