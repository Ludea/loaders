{"version":3,"file":"util.js","sourceRoot":"","sources":["../src/util.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  MAP_CHUNK_FACE_COUNT_X,\n  MAP_CHUNK_FACE_COUNT_Y,\n  MAP_CHUNK_HEIGHT,\n  MAP_CHUNK_VERTEX_COUNT,\n  MAP_CHUNK_VERTEX_STEP_X,\n  MAP_CHUNK_VERTEX_STEP_Y,\n  MAP_CHUNK_WIDTH,\n} from \"@wowserhq/format\";\n\nconst getBoundsCenter = (extent: Float32Array) => {\n  const center = new Float32Array(3);\n\n  center[0] = (extent[0] + extent[3]) * 0.5;\n  center[1] = (extent[1] + extent[4]) * 0.5;\n  center[2] = (extent[2] + extent[5]) * 0.5;\n\n  return center;\n};\n\nconst getBoundsRadius = (extent: Float32Array, center: Float32Array) => {\n  const x = extent[3] - center[0];\n  const y = extent[4] - center[1];\n  const z = extent[5] - center[2];\n\n  return Math.sqrt(x * x + y * y + z * z);\n};\n\nconst DEFAULT_TERRAIN_VERTEX_BUFFER = (() => {\n  // Vertex coordinates for x-axis (forward axis)\n  const vxe = new Float32Array(MAP_CHUNK_FACE_COUNT_X + 1);\n  const vxo = new Float32Array(MAP_CHUNK_FACE_COUNT_X);\n  for (let i = 0; i < MAP_CHUNK_FACE_COUNT_X; i++) {\n    const vx = -(i * MAP_CHUNK_VERTEX_STEP_X);\n    vxe[i] = vx;\n    vxo[i] = vx - MAP_CHUNK_VERTEX_STEP_X / 2.0;\n  }\n  vxe[MAP_CHUNK_FACE_COUNT_X] = -MAP_CHUNK_HEIGHT;\n\n  // Vertex coordinates for y-axis (right axis)\n  const vye = new Float32Array(MAP_CHUNK_FACE_COUNT_Y + 1);\n  const vyo = new Float32Array(MAP_CHUNK_FACE_COUNT_Y);\n  for (let i = 0; i < MAP_CHUNK_FACE_COUNT_Y; i++) {\n    const vy = -(i * MAP_CHUNK_VERTEX_STEP_Y);\n    vye[i] = vy;\n    vyo[i] = vy - MAP_CHUNK_VERTEX_STEP_Y / 2.0;\n  }\n  vye[MAP_CHUNK_FACE_COUNT_Y] = -MAP_CHUNK_WIDTH;\n\n  const vertexBuffer = new ArrayBuffer(MAP_CHUNK_VERTEX_COUNT * 16);\n  const vertexBufferView = new DataView(vertexBuffer);\n\n  let i = 0;\n\n  for (let x = 0; x < MAP_CHUNK_FACE_COUNT_X + 1; x++) {\n    // Evens\n    for (let y = 0; y < MAP_CHUNK_FACE_COUNT_Y + 1; y++) {\n      vertexBufferView.setFloat32(i * 16 + 0, vxe[x], true);\n      vertexBufferView.setFloat32(i * 16 + 4, vye[y], true);\n\n      i++;\n    }\n\n    // Odds\n    if (x < MAP_CHUNK_FACE_COUNT_X) {\n      for (let y = 0; y < MAP_CHUNK_FACE_COUNT_Y; y++) {\n        vertexBufferView.setFloat32(i * 16 + 0, vxo[x], true);\n        vertexBufferView.setFloat32(i * 16 + 4, vyo[y], true);\n\n        i++;\n      }\n    }\n  }\n\n  return vertexBuffer;\n})();\n\nconst createTerrainVertexBuffer = (\n  vertexHeights: Float32Array,\n  vertexNormals: Int8Array,\n) => {\n  // Copy the default vertex buffer (contains x and y coordinates)\n  const data = DEFAULT_TERRAIN_VERTEX_BUFFER.slice(0);\n  const view = new DataView(data);\n\n  let minZ = +Infinity;\n  let maxZ = -Infinity;\n\n  for (let i = 0; i < vertexHeights.length; i++) {\n    const vertexOfs = i * 16;\n    const vertexHeight = vertexHeights[i];\n\n    // Track bounds (z)\n    minZ = Math.min(minZ, vertexHeight);\n    maxZ = Math.max(maxZ, vertexHeight);\n\n    // Position (z)\n    view.setFloat32(vertexOfs + 8, vertexHeight, true);\n\n    // Normal\n    const normalOfs = i * 3;\n    view.setInt8(vertexOfs + 12, vertexNormals[normalOfs + 0]);\n    view.setInt8(vertexOfs + 13, vertexNormals[normalOfs + 1]);\n    view.setInt8(vertexOfs + 14, vertexNormals[normalOfs + 2]);\n  }\n\n  const minX = view.getFloat32(data.byteLength - 16, true);\n  const minY = view.getFloat32(data.byteLength - 12, true);\n  const maxX = view.getFloat32(0, true);\n  const maxY = view.getFloat32(4, true);\n\n  const extent = new Float32Array([minX, minY, minZ, maxX, maxY, maxZ]);\n  const center = getBoundsCenter(extent);\n  const radius = getBoundsRadius(extent, center);\n\n  return {\n    bounds: { extent, center, radius },\n    vertexBuffer: data,\n  };\n};\n\nconst createTerrainIndexBuffer = (holes: number) => {\n  const data = new ArrayBuffer(\n    MAP_CHUNK_FACE_COUNT_X * MAP_CHUNK_FACE_COUNT_Y * 3 * 4 * 2,\n  );\n  const view = new DataView(data);\n\n  let i = 0;\n\n  for (let x = 0; x < MAP_CHUNK_FACE_COUNT_X; x++) {\n    for (let y = 0; y < MAP_CHUNK_FACE_COUNT_Y; y++) {\n      if (isTerrainHole(holes, x, y)) {\n        continue;\n      }\n\n      const f = x * 17 + y + 9;\n\n      view.setUint16(i * 24 + 0, f, true);\n      view.setUint16(i * 24 + 2, f - 9, true);\n      view.setUint16(i * 24 + 4, f + 8, true);\n\n      view.setUint16(i * 24 + 6, f, true);\n      view.setUint16(i * 24 + 8, f - 8, true);\n      view.setUint16(i * 24 + 10, f - 9, true);\n\n      view.setUint16(i * 24 + 12, f, true);\n      view.setUint16(i * 24 + 14, f + 9, true);\n      view.setUint16(i * 24 + 16, f - 8, true);\n\n      view.setUint16(i * 24 + 18, f, true);\n      view.setUint16(i * 24 + 20, f + 8, true);\n      view.setUint16(i * 24 + 22, f + 9, true);\n\n      i++;\n    }\n  }\n\n  return data;\n};\n\nconst isTerrainHole = (holes: number, x: number, y: number) => {\n  const column = (y / 2) | 0;\n  const row = (x / 2) | 0;\n  const hole = 1 << (column * 4 + row);\n\n  return (hole & holes) !== 0;\n};\n\nconst mergeTerrainLayerSplats = (\n  layerSplats: Uint8Array[],\n  width: number,\n  height: number,\n) => {\n  const data = new Uint8Array(width * height * 4);\n\n  // Treat each layer splat as a separate color channel\n  for (let l = 0; l < layerSplats.length; l++) {\n    const layerSplat = layerSplats[l];\n\n    for (let i = 0; i < width * height; i++) {\n      data[i * 4 + l] = layerSplat[i];\n    }\n  }\n\n  return data;\n};\n\nexport {\n  mergeTerrainLayerSplats,\n  createTerrainIndexBuffer,\n  createTerrainVertexBuffer,\n};\n"]}