{"version":3,"file":"Index.js","sourceRoot":"","sources":["../src/Index.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  ISceneLoaderPluginAsync,\n  ISceneLoaderPluginFactory,\n  ISceneLoaderAsyncResult,\n  ISceneLoaderPlugin,\n  ISceneLoaderPluginExtensions,\n  ISceneLoaderProgressEvent,\n} from \"@babylonjs/core/Loading/sceneLoader\";\nimport type { Scene } from \"@babylonjs/core/scene\";\nimport { AssetContainer } from \"@babylonjs/core/assetContainer\";\nimport { Buffer, VertexBuffer } from \"@babylonjs/core/Buffers/buffer\";\nimport { VertexData } from \"@babylonjs/core/Meshes/mesh.vertexData\";\n//import { BoundingInfo } from \"@babylonjs/core/Culling\";\n//import { Vector3 } from \"@babylonjs/core/Maths\";\nimport { Mesh } from \"@babylonjs/core/Meshes/mesh\";\nimport { Geometry } from \"@babylonjs/core/Meshes/geometry\";\n\nimport {\n  //MapLayer,\n  MapChunk,\n  MapArea,\n  //MAP_LAYER_SPLAT_X,\n  //MAP_LAYER_SPLAT_Y,\n} from \"@wowserhq/format\";\nimport {\n  createTerrainVertexBuffer,\n  createTerrainIndexBuffer,\n  //mergeTerrainLayerSplats,\n} from \"./util\";\nimport { TerrainSpec } from \"./types\";\n\nexport default class ADTFileLoader\n  implements ISceneLoaderPluginAsync, ISceneLoaderPluginFactory\n{\n  public wdtContent: any;\n  public name = \"adt\";\n  public extensions: ISceneLoaderPluginExtensions = {\n    \".adt\": { isBinary: true },\n  };\n  /** @internal */\n\n  public loadAssetContainerAsync(\n    scene: Scene,\n    data: string,\n    rootUrl: string,\n  ): Promise<AssetContainer> {\n    const container = new AssetContainer(scene);\n\n    return this.importMeshAsync(null, scene, data, rootUrl)\n      .then((result) => {\n        result.meshes.forEach((mesh) => container.meshes.push(mesh));\n        result.meshes.forEach((mesh) => {\n          const material = mesh.material;\n          if (material) {\n            // Materials\n            if (container.materials.indexOf(material) == -1) {\n              container.materials.push(material);\n\n              // Textures\n              const textures = material.getActiveTextures();\n              textures.forEach((t) => {\n                if (container.textures.indexOf(t) == -1) {\n                  container.textures.push(t);\n                }\n              });\n            }\n          }\n        });\n        return container;\n      })\n      .catch((ex) => {\n        throw ex;\n      });\n  }\n\n  public importMeshAsync(\n    meshesNames: any,\n    scene: Scene,\n    data: any,\n    rootUrl: string,\n    onProgress?: (event: ISceneLoaderProgressEvent) => void,\n    fileName?: string,\n  ): Promise<ISceneLoaderAsyncResult> {\n    //    const map =\n    //new Map().load(this.wdtContent);\n    const area = new MapArea(4).load(data);\n    let adt = new Mesh(\"root\", scene);\n    let spec = loadAreaSpec(area);\n    for (let i = 0; i < spec.length; i++) {\n      let mesh = createMesh(spec[i], scene);\n      mesh.parent = adt;\n    }\n\n    const array: Array<Promise<void>> = [];\n    const meshes: Array<Mesh> = [];\n    meshes.push(adt);\n\n    return Promise.all(array).then(() => {\n      return {\n        meshes: meshes,\n        particleSystems: [],\n        skeletons: [],\n        animationGroups: [],\n        transformNodes: [],\n        geometries: [],\n        lights: [],\n        spriteManagers: [],\n      };\n    });\n  }\n\n  public loadAsync(scene: Scene, data: string, rootUrl: string): Promise<void> {\n    //Get the 3D model\n    return this.importMeshAsync(null, scene, data, rootUrl).then(() => {});\n  }\n\n  public loadWDT(wdt: any) {\n    this.wdtContent = wdt;\n  }\n\n  public createPlugin(): ISceneLoaderPluginAsync | ISceneLoaderPlugin {\n    return new ADTFileLoader();\n  }\n}\n\nconst createTerrainGeometrySpec = (chunk: MapChunk) => {\n  const { vertexBuffer, bounds } = createTerrainVertexBuffer(\n    chunk.vertexHeights,\n    chunk.vertexNormals,\n  );\n  const indexBuffer = createTerrainIndexBuffer(chunk.holes);\n\n  return {\n    bounds,\n    vertexBuffer,\n    indexBuffer,\n  };\n};\n\n/* const createTerrainMaterialSpec = (chunk: MapChunk) => {\n  const splat = createTerrainSplatSpec(chunk.layers);\n  const layers = chunk.layers.map((layer) => ({\n    effectId: layer.effectId,\n    texturePath: layer.texture,\n  }));\n\n  return {\n    layers,\n    splat,\n  };\n};\n\n/* const createTerrainSplatSpec = (layers: MapLayer[]) => {\n  // No splat (0 or 1 layer)\n\n  if (layers.length <= 1) {\n    return null;\n  }\n\n  // Single splat (2 layers)\n\n  if (layers.length === 2) {\n    return {\n      width: MAP_LAYER_SPLAT_X,\n      height: MAP_LAYER_SPLAT_Y,\n      data: layers[1].splat,\n      channels: 1,\n    };\n  }\n\n  // Multiple splats (3+ layers)\n\n  const layerSplats = layers.slice(1).map((layer) => layer.splat);\n  const mergedSplat = mergeTerrainLayerSplats(\n    layerSplats,\n    MAP_LAYER_SPLAT_X,\n    MAP_LAYER_SPLAT_Y,\n  );\n  return {\n    width: MAP_LAYER_SPLAT_X,\n    height: MAP_LAYER_SPLAT_Y,\n    data: mergedSplat,\n    channels: 4,\n  };\n}; */\n\nconst loadAreaSpec = (area: any) => {\n  let terrainSpecs: TerrainSpec[] = [];\n  for (const chunk of area.chunks) {\n    if (chunk.layers.length === 0) {\n      continue;\n    }\n    const terrainSpec = {\n      position: chunk.position,\n      geometry: createTerrainGeometrySpec(chunk),\n      //      material: createTerrainMaterialSpec(chunk),\n    };\n    terrainSpecs.push(terrainSpec);\n  }\n  return terrainSpecs;\n};\n\nconst createMesh = (spec: TerrainSpec, scene: any) => {\n  //const geometry = \ncreateGeometry(spec, scene.getEngine());\n\n  let childMesh = new Mesh(\"adt\", scene);\n//  geometry.applyToMesh(childMesh);\n\n  return childMesh;\n};\n\nconst createGeometry = (spec: TerrainSpec, engine: any) => {\n  const positions = new Float32Array(spec.geometry.vertexBuffer);\n  const positionBuffer = new Buffer(engine,  positions, false, 4);\n//  const normals = new Int8Array(spec.geometry.vertexBuffer);\n//  const normalsBuffer = new Buffer(engine, normals, false, 16);\n  const index = new Uint16Array(spec.geometry.indexBuffer);\n  //const indexBuffer = new Buffer(engine, index, false);\nconsole.log(\"index : \", index);\nconsole.log(\"positions : \", positions);\n//p  const positionsVBuffer = \nnew VertexBuffer(\n    engine,\n    positionBuffer,\n    VertexBuffer.PositionKind,\n    false,\n    false,\n    0,\n    false,\n    0,\n    3,\n  );\nconst test = new VertexData();\ntest.set(positions, VertexBuffer.PositionKind);\n  /* const normalsVBuffer = new VertexBuffer(\n    engine,\n    normalsBuffer,\n    VertexBuffer.NormalKind,\n    false,\n    false,\n    0,\n    false,\n    12,\n    4,\n    0,\n    true,\n  );*/ \n\n  let geometry = new Geometry(\"geometry\");\n  //geometry.setVerticesBuffer(positionsVBuffer);\n  //geometry.setVerticesBuffer(normalsVBuffer);\n  //geometry.setIndexBuffer(indexBuffer, positions.length / 3, index.length);\ntest.applyToGeometry(geometry);\n//geometry.setIndices(index);\n  /* const minimum = new Vector3(\n    spec.bounds.minX,\n    spec.bounds.minY,\n    spec.bounds.minZ,\n  );\n  const maximum = new Vector3(\n    spec.geometry.bounds.maxX,\n    spec.bounds.maxY,\n    spec.bounds.maxZ,\n  ); */\n  //const center = new Vector3(spec.bounds.center[0], spec.bounds.center[1], s>\n  return geometry;\n};\n"]}