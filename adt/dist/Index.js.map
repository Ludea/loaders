{"version":3,"file":"Index.js","sourceRoot":"","sources":["../src/Index.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  MAP_CHUNK_FACE_COUNT_X,\n  MAP_CHUNK_FACE_COUNT_Y,\n  MAP_CHUNK_HEIGHT,\n  MAP_CHUNK_VERTEX_COUNT,\n  MAP_CHUNK_VERTEX_STEP_X,\n  MAP_CHUNK_VERTEX_STEP_Y,\n  MAP_CHUNK_WIDTH,\n} from \"@wowserhq/format\";\n\nimport type {\n  ISceneLoaderPluginAsync,\n  ISceneLoaderPluginFactory,\n  ISceneLoaderAsyncResult,\n  ISceneLoaderPlugin,\n  ISceneLoaderProgressEvent,\n} from \"@babylonjs/core/Loading/sceneLoader\";\nimport type { Scene } from \"@babylonjs/core/scene\";\nimport { AssetContainer } from \"@babylonjs/core/assetContainer\";\nimport { Mesh } from \"@babylonjs/core/Meshes/mesh\";\nimport { VertexData } from \"@babylonjs/core/Meshes/mesh.vertexData\";\nimport { Map, MapArea } from \"@wowserhq/format\";\n\nconst DEFAULT_TERRAIN_VERTEX_BUFFER = (() => {\n  // Vertex coordinates for x-axis (forward axis)\n  const vxe = new Float32Array(MAP_CHUNK_FACE_COUNT_X + 1);\n  const vxo = new Float32Array(MAP_CHUNK_FACE_COUNT_X);\n  for (let i = 0; i < MAP_CHUNK_FACE_COUNT_X; i++) {\n    const vx = -(i * MAP_CHUNK_VERTEX_STEP_X);\n    vxe[i] = vx;\n    vxo[i] = vx - MAP_CHUNK_VERTEX_STEP_X / 2.0;\n  }\n  vxe[MAP_CHUNK_FACE_COUNT_X] = -MAP_CHUNK_HEIGHT;\n\n  // Vertex coordinates for y-axis (right axis)\n  const vye = new Float32Array(MAP_CHUNK_FACE_COUNT_Y + 1);\n  const vyo = new Float32Array(MAP_CHUNK_FACE_COUNT_Y);\n  for (let i = 0; i < MAP_CHUNK_FACE_COUNT_Y; i++) {\n    const vy = -(i * MAP_CHUNK_VERTEX_STEP_Y);\n    vye[i] = vy;\n    vyo[i] = vy - MAP_CHUNK_VERTEX_STEP_Y / 2.0;\n  }\n  vye[MAP_CHUNK_FACE_COUNT_Y] = -MAP_CHUNK_WIDTH;\n\n  const vertexBuffer = new ArrayBuffer(MAP_CHUNK_VERTEX_COUNT * 16);\n  const vertexBufferView = new DataView(vertexBuffer);\n\n  let i = 0;\n\n  for (let x = 0; x < MAP_CHUNK_FACE_COUNT_X + 1; x++) {\n    // Evens\n    for (let y = 0; y < MAP_CHUNK_FACE_COUNT_Y + 1; y++) {\n      vertexBufferView.setFloat32(i * 16 + 0, vxe[x], true);\n      vertexBufferView.setFloat32(i * 16 + 4, vye[y], true);\n\n      i++;\n    }\n\n    // Odds\n    if (x < MAP_CHUNK_FACE_COUNT_X) {\n      for (let y = 0; y < MAP_CHUNK_FACE_COUNT_Y; y++) {\n        vertexBufferView.setFloat32(i * 16 + 0, vxo[x], true);\n        vertexBufferView.setFloat32(i * 16 + 4, vyo[y], true);\n\n        i++;\n      }\n    }\n  }\n\n  return vertexBuffer;\n})();\n\nexport default class ADTFileLoader\n  implements ISceneLoaderPluginAsync, ISceneLoaderPluginFactory\n{\n  public wdtContent: any;\n  public name = \"adt\";\n  public extensions = \".adt\";\n\n  /** @internal */\n\n  public loadAssetContainerAsync(\n    scene: Scene,\n    data: string,\n    rootUrl: string,\n  ): Promise<AssetContainer> {\n    const container = new AssetContainer(scene);\n\n    return this.importMeshAsync(null, scene, data, rootUrl)\n      .then((result) => {\n        result.meshes.forEach((mesh) => container.meshes.push(mesh));\n        result.meshes.forEach((mesh) => {\n          const material = mesh.material;\n          if (material) {\n            // Materials\n            if (container.materials.indexOf(material) == -1) {\n              container.materials.push(material);\n\n              // Textures\n              const textures = material.getActiveTextures();\n              textures.forEach((t) => {\n                if (container.textures.indexOf(t) == -1) {\n                  container.textures.push(t);\n                }\n              });\n            }\n          }\n        });\n        return container;\n      })\n      .catch((ex) => {\n        throw ex;\n      });\n  }\n\n  public importMeshAsync(\n    meshesNames: any,\n    scene: Scene,\n    data: any,\n    rootUrl: string,\n    onProgress?: (event: ISceneLoaderProgressEvent) => void,\n    fileName?: string,\n  ): Promise<ISceneLoaderAsyncResult> {\n    const map = new Map().load(this.wdtContent);\n    const areaData = data;\n    const area = new MapArea(map.layerSplatDepth).load(areaData);\n    var vertexData = new VertexData();\n    var adt = new Mesh(\"adt\", scene);\n    let vertexBuffer;\n    let indexBuffer;\n    for (const chunk of area.chunks) {\n      if (chunk.layers.length === 0) {\n        continue;\n      }\n      vertexBuffer = createTerrainVertexBuffer(\n        chunk.vertexHeights,\n        chunk.vertexNormals,\n      );\n      indexBuffer = createTerrainIndexBuffer(chunk.holes);\n    }\n    const position: number[] = Array.from(new Float32Array(indexBuffer!));\n    const indices: number[] = Array.from(new Float32Array(vertexBuffer!));\n    vertexData.positions = position;\n    vertexData.indices = indices;\n    vertexData.applyToMesh(adt);\n    const array: Array<Promise<void>> = [];\n    const mesh: Array<Mesh> = [];\n    mesh.push(adt);\n    return Promise.all(array).then(() => {\n      return {\n        meshes: mesh,\n        particleSystems: [],\n        skeletons: [],\n        animationGroups: [],\n        transformNodes: [],\n        geometries: [],\n        lights: [],\n      };\n    });\n  }\n\n  public loadAsync(scene: Scene, data: string, rootUrl: string): Promise<void> {\n    //Get the 3D model\n    return this.importMeshAsync(null, scene, data, rootUrl).then(() => {});\n  }\n\n  public loadWDT(wdt: any) {\n    this.wdtContent = wdt;\n  }\n\n  public createPlugin(): ISceneLoaderPluginAsync | ISceneLoaderPlugin {\n    return new ADTFileLoader();\n  }\n}\n\nconst createTerrainVertexBuffer = (\n  vertexHeights: Float32Array,\n  vertexNormals: Int8Array,\n) => {\n  // Copy the default vertex buffer (contains x and y coordinates)\n  const data = DEFAULT_TERRAIN_VERTEX_BUFFER.slice(0);\n  const view = new DataView(data);\n\n  for (let i = 0; i < vertexHeights.length; i++) {\n    const vertexOfs = i * 16;\n\n    view.setFloat32(vertexOfs + 8, vertexHeights[i], true);\n\n    const normalOfs = i * 3;\n    view.setInt8(vertexOfs + 12, vertexNormals[normalOfs + 0]);\n    view.setInt8(vertexOfs + 13, vertexNormals[normalOfs + 1]);\n    view.setInt8(vertexOfs + 14, vertexNormals[normalOfs + 2]);\n  }\n\n  return data;\n};\n\nconst createTerrainIndexBuffer = (holes: number) => {\n  const data = new ArrayBuffer(\n    MAP_CHUNK_FACE_COUNT_X * MAP_CHUNK_FACE_COUNT_Y * 3 * 4 * 2,\n  );\n  const view = new DataView(data);\n\n  let i = 0;\n\n  for (let x = 0; x < MAP_CHUNK_FACE_COUNT_X; x++) {\n    for (let y = 0; y < MAP_CHUNK_FACE_COUNT_Y; y++) {\n      if (isTerrainHole(holes, x, y)) {\n        continue;\n      }\n\n      const f = x * 17 + y + 9;\n\n      view.setUint16(i * 24 + 0, f, true);\n      view.setUint16(i * 24 + 2, f - 9, true);\n      view.setUint16(i * 24 + 4, f + 8, true);\n\n      view.setUint16(i * 24 + 6, f, true);\n      view.setUint16(i * 24 + 8, f - 8, true);\n      view.setUint16(i * 24 + 10, f - 9, true);\n\n      view.setUint16(i * 24 + 12, f, true);\n      view.setUint16(i * 24 + 14, f + 9, true);\n      view.setUint16(i * 24 + 16, f - 8, true);\n\n      view.setUint16(i * 24 + 18, f, true);\n      view.setUint16(i * 24 + 20, f + 8, true);\n      view.setUint16(i * 24 + 22, f + 9, true);\n\n      i++;\n    }\n  }\n\n  return data;\n};\n\nconst isTerrainHole = (holes: number, x: number, y: number) => {\n  const column = (y / 2) | 0;\n  const row = (x / 2) | 0;\n  const hole = 1 << (column * 4 + row);\n\n  return (hole & holes) !== 0;\n};\n"]}